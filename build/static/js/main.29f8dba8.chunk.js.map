{"version":3,"sources":["components/QuestionCard.tsx","pushValueToRandeomIndex.ts","api/index.ts","App.tsx","index.tsx"],"names":["QuestionCard","thatQuestion","thatAllOptions","userAllAnswers","checkAns","className","dangerouslySetInnerHTML","__html","map","oneOpt","index","Button","variant","disabled","value","onClick","pushValueToRandomIndex","array","randomIndex","Math","floor","random","length","splice","fetchQuestions","amount","a","API","axios","get","results","data","modifiedData","obj","allOptions","correct_answer","incorrect_answers","useStyles","makeStyles","app","display","justifyContent","alignItems","flexDirection","height","width","position","top","bottom","overflow","card","themechip","App","useState","loading","setLoading","gameover","setGameover","score","setScrore","allQuestion","setAllQuestion","setUserAllAnswers","currentQuesNo","setCurrentQuesNo","darkMode","setDarkMode","theme","createMuiTheme","palette","type","background","paper","cardAnimation","useWebAnimations","backInLeft","btnAnimation","backInRight","chipAnimation","fadeIn","startQuiz","classes","screen400","useMediaQuery","ThemeProvider","style","backgroundColor","Typography","color","Card","classnames","ref","raised","CardContent","align","role","question","undefined","e","userInput","currentTarget","correctOne","correctOrNot","x","ansObj","userAnswer","correctAns","TOTAL_QUESTIONS","CardActionArea","getAnimation","play","Chip","icon","Switch","checked","size","label","id","marginLeft","fontWeight","fontStyle","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.29f8dba8.chunk.js","sourcesContent":["import React from 'react';\nimport { Button } from '@material-ui/core';\nimport { answerObj } from '../App';\n\ntype props = {\n    thatQuestion    : string;\n    thatAllOptions  : string[];\n    userAllAnswers ?: answerObj;\n    checkAns        : (e: React.MouseEvent<HTMLButtonElement>) => void;\n}\n\nfunction QuestionCard({\n    thatQuestion,\n    thatAllOptions,\n    userAllAnswers,\n    checkAns,\n}: props) {\n    return (\n        <div className=\"questionCard\">\n            <p dangerouslySetInnerHTML={{ __html: thatQuestion }} className=\"questionCard_question\"/>\n            <div>\n                {\n                    thatAllOptions.map((oneOpt, index) => {\n                        return (\n                            <div key={index} className=\"questionCard_option\">\n                                <Button\n                                    variant=\"contained\"\n                                    disabled={!!userAllAnswers}        //!! for convert type to boolean\n                                    value={oneOpt}\n                                    onClick={checkAns}\n                                >  <span dangerouslySetInnerHTML={{ __html: oneOpt }}/>\n                                </Button>\n                            </div>\n                        )\n                    })\n                }\n            </div>\n        </div>\n    )\n}\n\nexport default QuestionCard;","export const pushValueToRandomIndex = (value: string, array: string[]):string[] => {\n\n    const randomIndex: number = Math.floor(Math.random() * array.length);   //if array 3 then ( 0 - 2 )\n\n    array.splice(randomIndex, 0, value);                                    //add value at 'randomIndex' & del value at 0 index\n\n    return array;\n}","import axios from 'axios';\nimport { pushValueToRandomIndex } from '../pushValueToRandeomIndex';\n\nexport type fetchDataTypes = {\n    category          : string;\n    correct_answer    : string;\n    difficulty        : string;\n    incorrect_answers : string[];\n    question          : string;\n    type              : string;\n    //we updated the data of API before sending and create 'allOptions'for thats why\n    allOptions        : string[];\n}\n\nexport const fetchQuestions = async (amount: number) => {\n    const API = `https://opentdb.com/api.php?amount=${amount}`;\n\n    const { data: { results } } = await axios.get(API);            //returns array of multiple objects\n\n    const modifiedData = results.map((obj: fetchDataTypes) => (    //updating each of object of an array\n                            { \n                                ...obj,                            //string          //array\n                                allOptions: pushValueToRandomIndex(obj.correct_answer, obj.incorrect_answers)\n                            }\n                          )\n                        )\n\n    return modifiedData;\n}","import React, { useState } from 'react';\nimport { QuestionCard } from './components';\nimport { Card, CardContent, Typography, Button, Chip, Switch, CardActionArea } from '@material-ui/core';\nimport { ThemeProvider, createMuiTheme } from '@material-ui/core/styles';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Brightness4SharpIcon from '@material-ui/icons/Brightness4Sharp';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport useWebAnimations, { backInLeft, backInRight, fadeIn } from '@wellyshen/use-web-animations';\nimport { fetchQuestions, fetchDataTypes } from  './api';\nimport classnames from 'classnames';\n\nexport type answerObj = {\n    question     : string;\n    userAnswer   : string;\n    correctOrNot : boolean;\n    correctAns   : string;\n}\n\nconst TOTAL_QUESTIONS = 10;\n\nconst useStyles = makeStyles({\n    app: {\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        flexDirection: \"column\",\n        //for cover entire screen of any size\n        height: \"100%\",\n        width: \"100%\",\n        position: \"absolute\",\n        top: 0,\n        bottom: 0,\n        overflow: \"hidden\"\n        //for cover entire screen of any size\n    },\n    card: {\n       width: \"23.5rem\",\n       height: \"33rem\",\n       display: \"flex\",\n       justifyContent: \"center\",\n       alignItems: \"center\"\n    },\n    themechip: {\n        display: \"flex\",\n        alignItems: \"center\"\n    }\n})\n\nfunction App() {\n    const [ loading, setLoading ] = useState(false);\n    const [ gameover,  setGameover ] = useState(true);\n    const [ score,  setScrore ] = useState(0);\n    const [ allQuestion, setAllQuestion ] = useState<fetchDataTypes[]>([]);   //array contains objects\n    const [ userAllAnswers, setUserAllAnswers ] = useState<answerObj[]>([]);  //array contains objects\n    const [ currentQuesNo, setCurrentQuesNo ] = useState(10);\n\n    //theme\n    const [ darkMode, setDarkMode ] = useState(true);\n    const theme = createMuiTheme({\n        palette: {\n            type: darkMode ? \"dark\" : \"light\",\n            background: {        //black     //white\n                paper: darkMode ? \"#000000\" : \"#FFFFFF\"\n            }\n        }\n    })\n  \n    const cardAnimation = useWebAnimations({ ...backInLeft });\n    const btnAnimation = useWebAnimations({ ...backInRight });\n    const chipAnimation = useWebAnimations({ ...fadeIn });\n\n    const startQuiz = async () => {\n        setLoading(true);\n        setGameover(false);\n        setScrore(0);\n        setAllQuestion(await fetchQuestions(10));\n        setUserAllAnswers([]);\n        setCurrentQuesNo(0);\n        //all operations performed so, loading now false\n        setLoading(false);\n    }\n\n    const checkAns = (e: React.MouseEvent<HTMLButtonElement>) => {\n        if(!gameover) {\n            // user input\n            const userInput = e.currentTarget.value;\n            // correct one\n            const correctOne = allQuestion[currentQuesNo].correct_answer;\n            // correct or not\n            const correctOrNot = userInput === correctOne;\n            // if correct then increase score\n            if(correctOrNot) {\n                setScrore(x => x + 1);\n            }\n            // push object to userAllAnswers array\n            const ansObj = {\n                question     : allQuestion[currentQuesNo].question,\n                userAnswer   : userInput,\n                correctOrNot : correctOrNot,\n                correctAns   : correctOne\n            }\n            setUserAllAnswers(x => [...x, ansObj]);\n        }\n    }\n\n    const nextQues = () => {\n        if(currentQuesNo + 1 !== TOTAL_QUESTIONS) {\n            setCurrentQuesNo(x => x + 1);\n        }\n        else {\n            setGameover(true);\n        }\n    }\n\n    const classes = useStyles();\n    const screen400 = useMediaQuery('(max-width: 400px)');\n\n    return (\n        <ThemeProvider theme={theme}>\n            <div\n                className={classes.app}\n                style={darkMode ?\n                    { backgroundColor: \"rgba(214, 69, 65, 1)\" } : { backgroundColor: \"rgba(83, 51, 237, 1)\" }\n                }\n            >\n                {\n                    (!loading && !gameover)\n                    &&\n                    <>\n                        <Typography\n                            variant=\"h5\"\n                            className=\"score\"\n                            style={darkMode ?\n                                { backgroundColor: \"#FFFFFF\", color: \"#000000\" } : { backgroundColor: \"#000000\", color: \"#FFFFFF\" }\n                            }\n                        > \n                           Score: {score}\n                        </Typography>\n                        <Typography\n                            variant=\"h5\"\n                            className=\"quesNo\"\n                            style={darkMode ?\n                                { backgroundColor: \"#FFFFFF\", color: \"#000000\" } : { backgroundColor: \"#000000\", color: \"#FFFFFF\" }\n                            }\n                        > \n                           Question: {currentQuesNo + 1} / {TOTAL_QUESTIONS}\n                        </Typography>\n                    </>\n                }\n\n                <Card\n                    className={classnames(classes.card, \"card\")}\n                    ref={cardAnimation.ref}\n                    raised\n                >\n                    <CardContent>\n                        <Typography variant=\"h2\" className={(loading || !gameover) ? \"hidetitle\" : \"title\"} align=\"center\">\n                            Quiz Application\n                        </Typography>\n\n                        {\n                            (gameover) && \n                            <Button\n                                className=\"startBtn\"\n                                variant=\"contained\"\n                                color= {darkMode ? \"secondary\" : \"primary\"}\n                                onClick={startQuiz}\n                                style={darkMode ? { color : \"#000000\" } : { color : \"#FFFFFF\" }}\n                            > Start\n                            </Button>\n                        }\n                        \n                        {\n                            (loading && !gameover)\n                            &&\n                            <Typography\n                                variant=\"h6\"\n                                className=\"loading\"\n                            >   <span> Loading. . . </span>\n                                <div className={`spinner-border spinner-border-sm text-${darkMode ? `danger`: `primary`}`} role=\"status\"> <span className=\"sr-only\">Loading...</span> </div>\n                                <div className={`spinner-border spinner-border-sm text-${darkMode ? `danger`: `primary`}`} role=\"status\"> <span className=\"sr-only\">Loading...</span> </div>\n                                <div className={`spinner-border spinner-border-sm text-${darkMode ? `danger`: `primary`}`} role=\"status\"> <span className=\"sr-only\">Loading...</span> </div>\n                            </Typography>\n                        }\n                        \n                        {\n                            (!loading && !gameover)\n                            &&\n                            <QuestionCard\n                                thatQuestion={allQuestion[currentQuesNo].question}\n                                thatAllOptions={allQuestion[currentQuesNo].allOptions}\n                                userAllAnswers={userAllAnswers ? userAllAnswers[currentQuesNo] : undefined}\n                                checkAns={checkAns}\n                            /> \n                        }\n                        \n                        {\n                            (!loading && !gameover && (userAllAnswers.length === currentQuesNo + 1) && (currentQuesNo !== TOTAL_QUESTIONS - 1))\n                            &&\n                            <Button\n                                className=\"nextBtn\"\n                                variant=\"contained\"\n                                color= {darkMode ? \"secondary\" : \"primary\"}\n                                onClick={nextQues}\n                            > Next\n                            </Button>\n                        }\n                    </CardContent>\n                </Card>\n\n                <div\n                    onClick={() => setDarkMode(x => !x)}\n                    ref={btnAnimation.ref as React.RefObject<HTMLDivElement>}\n               >\n                    <CardActionArea\n                        className=\"chip\"\n                        ref={chipAnimation.ref as React.RefObject<HTMLButtonElement>}\n                        onClick={() => chipAnimation?.getAnimation()?.play()}\n                    >\n                        <Chip\n                            icon={\n                                <Switch\n                                    checked={!darkMode}\n                                    style={{ color : darkMode ? \"#000000\" : \"#FFFFFF\" }}\n                                    size={screen400 ? \"small\" : \"medium\"}\n                                    className=\"hideon335\"\n                                />\n                            }\n                            label={\n                                <Typography className={classes.themechip} style={{ color : darkMode ? \"#000000\" : \"#FFFFFF\" }}>\n                                    <Brightness4SharpIcon id=\"icon\"/>\n                                    <span\n                                        style={{ marginLeft: 7, fontWeight: \"bold\", fontStyle: \"italic\" }}\n                                        className=\"hideon275\"\n                                    > theme </span>\n                                </Typography>\n                            }\n                            className=\"fade_effect\"\n                            color= {darkMode ? \"secondary\" : \"primary\"}\n                        />\n                    </CardActionArea>\n                    <span className=\"hideabove275\"style={{ color : darkMode ? \"#000000\" : \"#FFFFFF\" }}> theme </span>\n                </div>\n            </div>\n        </ThemeProvider>\n    )\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './scss/Style.scss';\n\nReactDOM.render(<App/>, document.getElementById(\"root\"));\n"],"sourceRoot":""}